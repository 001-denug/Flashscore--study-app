"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["src_utils_monetizationManager_ts"],{

/***/ "./src/utils/monetizationManager.ts":
/*!******************************************!*\
  !*** ./src/utils/monetizationManager.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nclass MonetizationManager {\n    static getCreatorEarnings(userId) {\n        const data = localStorage.getItem(this.EARNINGS_KEY);\n        const earnings = data ? JSON.parse(data) : {};\n        return earnings[userId] || {\n            userId,\n            totalEarned: 0,\n            pendingWithdrawal: 0,\n            lastPayout: new Date(0),\n            conversionRate: this.DEFAULT_CONFIG.conversionRate\n        };\n    }\n    static recordUserPurchase(creatorId, purchaseAmount) {\n        const config = this.getConfig();\n        const creatorEarning = purchaseAmount * config.creatorCommission;\n        const data = localStorage.getItem(this.EARNINGS_KEY);\n        const earnings = data ? JSON.parse(data) : {};\n        const currentEarnings = this.getCreatorEarnings(creatorId);\n        earnings[creatorId] = {\n            ...currentEarnings,\n            totalEarned: currentEarnings.totalEarned + creatorEarning,\n            pendingWithdrawal: currentEarnings.pendingWithdrawal + creatorEarning\n        };\n        localStorage.setItem(this.EARNINGS_KEY, JSON.stringify(earnings));\n    }\n    static canWithdraw(userId) {\n        const earnings = this.getCreatorEarnings(userId);\n        return earnings.pendingWithdrawal >= this.DEFAULT_CONFIG.withdrawalMinimum;\n    }\n    static processWithdrawal(userId, piWalletAddress) {\n        const earnings = this.getCreatorEarnings(userId);\n        if (!this.canWithdraw(userId)) {\n            return {\n                success: false,\n                error: \"Minimum withdrawal is \".concat(this.DEFAULT_CONFIG.withdrawalMinimum, \" Pi coins\")\n            };\n        }\n        const realPiAmount = earnings.pendingWithdrawal / this.DEFAULT_CONFIG.conversionRate;\n        // In production, integrate with Pi Network API\n        // For now, simulate withdrawal\n        const data = localStorage.getItem(this.EARNINGS_KEY);\n        const allEarnings = data ? JSON.parse(data) : {};\n        allEarnings[userId] = {\n            ...earnings,\n            pendingWithdrawal: 0,\n            lastPayout: new Date()\n        };\n        localStorage.setItem(this.EARNINGS_KEY, JSON.stringify(allEarnings));\n        // Add withdrawal transaction record\n        this.addWithdrawalRecord(userId, realPiAmount, piWalletAddress);\n        return {\n            success: true,\n            amount: realPiAmount\n        };\n    }\n    static addWithdrawalRecord(userId, amount, address) {\n        const record = {\n            id: Date.now().toString(),\n            userId,\n            amount,\n            address,\n            timestamp: new Date(),\n            status: \"completed\"\n        };\n        const data = localStorage.getItem(\"withdrawal_records\");\n        const records = data ? JSON.parse(data) : [];\n        records.unshift(record);\n        localStorage.setItem(\"withdrawal_records\", JSON.stringify(records));\n    }\n    static getConfig() {\n        const data = localStorage.getItem(this.CONFIG_KEY);\n        return data ? JSON.parse(data) : this.DEFAULT_CONFIG;\n    }\n}\nMonetizationManager.EARNINGS_KEY = \"creator_earnings\";\nMonetizationManager.CONFIG_KEY = \"monetization_config\";\nMonetizationManager.DEFAULT_CONFIG = {\n    creatorCommission: 0.15,\n    withdrawalMinimum: 1000,\n    conversionRate: 100,\n    platformFee: 0.05 // 5% platform fee\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (MonetizationManager);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/monetizationManager.ts\n"));

/***/ })

}]);