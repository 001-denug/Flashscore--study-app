"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/sports";
exports.ids = ["pages/api/sports"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("node-fetch");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsports&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fsports.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsports&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fsports.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_sports_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/sports.ts */ \"(api)/./src/pages/api/sports.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_sports_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_sports_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_sports_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_sports_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/sports\",\n        pathname: \"/api/sports\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_sports_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnNwb3J0cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnNyYyUyRnBhZ2VzJTJGYXBpJTJGc3BvcnRzLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3NEO0FBQ3REO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxxREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMscURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd29ya3NwYWNlLz8yNjE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9zcmMvcGFnZXMvYXBpL3Nwb3J0cy50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3Nwb3J0c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Nwb3J0c1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsports&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fsports.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./Sports-api.ts":
/*!***********************!*\
  !*** ./Sports-api.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SportsAPIService: () => (/* binding */ SportsAPIService),\n/* harmony export */   createSportsAPIService: () => (/* binding */ createSportsAPIService)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"node-fetch\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([node_fetch__WEBPACK_IMPORTED_MODULE_0__]);\nnode_fetch__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass SportsAPIService {\n    constructor(config){\n        this.config = config;\n    }\n    // RapidAPI Sports Integration\n    async fetchNFLMatches() {\n        if (!this.config.rapidApiKey) {\n            throw new Error(\"RapidAPI key required for NFL data\");\n        }\n        try {\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"https://api-american-football.p.rapidapi.com/games?league=1&season=2025\", {\n                method: \"GET\",\n                headers: {\n                    \"X-RapidAPI-Key\": this.config.rapidApiKey,\n                    \"X-RapidAPI-Host\": \"api-american-football.p.rapidapi.com\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`NFL API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return this.formatNFLData(data);\n        } catch (error) {\n            console.error(\"NFL API fetch error:\", error);\n            throw error;\n        }\n    }\n    async fetchNBAMatches() {\n        if (!this.config.rapidApiKey) {\n            throw new Error(\"RapidAPI key required for NBA data\");\n        }\n        try {\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"https://api-basketball.p.rapidapi.com/games?league=12&season=2024-2025\", {\n                method: \"GET\",\n                headers: {\n                    \"X-RapidAPI-Key\": this.config.rapidApiKey,\n                    \"X-RapidAPI-Host\": \"api-basketball.p.rapidapi.com\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`NBA API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return this.formatNBAData(data);\n        } catch (error) {\n            console.error(\"NBA API fetch error:\", error);\n            throw error;\n        }\n    }\n    async fetchMLBMatches() {\n        if (!this.config.rapidApiKey) {\n            throw new Error(\"RapidAPI key required for MLB data\");\n        }\n        try {\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"https://api-baseball.p.rapidapi.com/games?league=1&season=2025\", {\n                method: \"GET\",\n                headers: {\n                    \"X-RapidAPI-Key\": this.config.rapidApiKey,\n                    \"X-RapidAPI-Host\": \"api-baseball.p.rapidapi.com\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`MLB API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return this.formatMLBData(data);\n        } catch (error) {\n            console.error(\"MLB API fetch error:\", error);\n            throw error;\n        }\n    }\n    // The Odds API Integration\n    async fetchOddsData(sport) {\n        if (!this.config.oddsApiKey) {\n            throw new Error(\"The Odds API key required for betting odds\");\n        }\n        const sportKeys = {\n            \"NFL\": \"americanfootball_nfl\",\n            \"NBA\": \"basketball_nba\",\n            \"MLB\": \"baseball_mlb\"\n        };\n        const sportKey = sportKeys[sport];\n        if (!sportKey) {\n            throw new Error(`Unsupported sport for odds: ${sport}`);\n        }\n        try {\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(`https://api.the-odds-api.com/v4/sports/${sportKey}/odds?apiKey=${this.config.oddsApiKey}&regions=us&markets=h2h,spreads,totals&oddsFormat=decimal`, {\n                method: \"GET\"\n            });\n            if (!response.ok) {\n                throw new Error(`Odds API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return this.formatOddsData(data);\n        } catch (error) {\n            console.error(\"Odds API fetch error:\", error);\n            throw error;\n        }\n    }\n    // Football-Data.org Integration (Soccer)\n    async fetchSoccerMatches() {\n        if (!this.config.footballDataApiKey) {\n            throw new Error(\"Football-Data.org API key required for soccer data\");\n        }\n        try {\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"https://api.football-data.org/v4/competitions/PL/matches\", {\n                method: \"GET\",\n                headers: {\n                    \"X-Auth-Token\": this.config.footballDataApiKey\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Soccer API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return this.formatSoccerData(data);\n        } catch (error) {\n            console.error(\"Soccer API fetch error:\", error);\n            throw error;\n        }\n    }\n    // Data formatting methods\n    formatNFLData(apiData) {\n        if (!apiData.response) return [];\n        return apiData.response.map((game)=>({\n                id: game.game.id.toString(),\n                sport: \"NFL\",\n                homeTeam: game.teams.home.name,\n                awayTeam: game.teams.away.name,\n                gameTime: game.game.date.start,\n                status: game.game.status.short,\n                homeScore: game.scores.home.total,\n                awayScore: game.scores.away.total\n            }));\n    }\n    formatNBAData(apiData) {\n        if (!apiData.response) return [];\n        return apiData.response.map((game)=>({\n                id: game.id.toString(),\n                sport: \"NBA\",\n                homeTeam: game.teams.home.name,\n                awayTeam: game.teams.away.name,\n                gameTime: game.date,\n                status: game.status.short,\n                homeScore: game.scores.home.total,\n                awayScore: game.scores.away.total\n            }));\n    }\n    formatMLBData(apiData) {\n        if (!apiData.response) return [];\n        return apiData.response.map((game)=>({\n                id: game.id.toString(),\n                sport: \"MLB\",\n                homeTeam: game.teams.home.name,\n                awayTeam: game.teams.away.name,\n                gameTime: game.date,\n                status: game.status.short,\n                homeScore: game.scores.home.total,\n                awayScore: game.scores.away.total\n            }));\n    }\n    formatSoccerData(apiData) {\n        if (!apiData.matches) return [];\n        return apiData.matches.map((match)=>({\n                id: match.id.toString(),\n                sport: \"Soccer\",\n                homeTeam: match.homeTeam.name,\n                awayTeam: match.awayTeam.name,\n                gameTime: match.utcDate,\n                status: match.status,\n                homeScore: match.score.fullTime.home,\n                awayScore: match.score.fullTime.away\n            }));\n    }\n    formatOddsData(apiData) {\n        if (!Array.isArray(apiData)) return [];\n        return apiData.flatMap((game)=>game.bookmakers.map((bookmaker)=>({\n                    gameId: game.id,\n                    bookmaker: bookmaker.title,\n                    homeOdds: bookmaker.markets.find((m)=>m.key === \"h2h\")?.outcomes[0]?.price || 0,\n                    awayOdds: bookmaker.markets.find((m)=>m.key === \"h2h\")?.outcomes[1]?.price || 0,\n                    drawOdds: bookmaker.markets.find((m)=>m.key === \"h2h\")?.outcomes[2]?.price,\n                    overUnder: this.extractOverUnder(bookmaker.markets)\n                })));\n    }\n    extractOverUnder(markets) {\n        const totalsMarket = markets.find((m)=>m.key === \"totals\");\n        if (!totalsMarket || !totalsMarket.outcomes) return undefined;\n        const overOutcome = totalsMarket.outcomes.find((o)=>o.name === \"Over\");\n        const underOutcome = totalsMarket.outcomes.find((o)=>o.name === \"Under\");\n        if (!overOutcome || !underOutcome) return undefined;\n        return {\n            total: parseFloat(overOutcome.point || underOutcome.point || \"0\"),\n            overOdds: overOutcome.price,\n            underOdds: underOutcome.price\n        };\n    }\n    // ESPN API Integration (Free)\n    async fetchESPNNFL() {\n        try {\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"https://site.api.espn.com/apis/site/v2/sports/football/nfl/scoreboard\");\n            if (!response.ok) {\n                throw new Error(`ESPN NFL API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return this.formatESPNData(data, \"NFL\");\n        } catch (error) {\n            console.error(\"ESPN NFL API fetch error:\", error);\n            throw error;\n        }\n    }\n    async fetchESPNNBA() {\n        try {\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"https://site.api.espn.com/apis/site/v2/sports/basketball/nba/scoreboard\");\n            if (!response.ok) {\n                throw new Error(`ESPN NBA API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return this.formatESPNData(data, \"NBA\");\n        } catch (error) {\n            console.error(\"ESPN NBA API fetch error:\", error);\n            throw error;\n        }\n    }\n    async fetchESPNMLB() {\n        try {\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"https://site.api.espn.com/apis/site/v2/sports/baseball/mlb/scoreboard\");\n            if (!response.ok) {\n                throw new Error(`ESPN MLB API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return this.formatESPNData(data, \"MLB\");\n        } catch (error) {\n            console.error(\"ESPN MLB API fetch error:\", error);\n            throw error;\n        }\n    }\n    formatESPNData(apiData, sport) {\n        if (!apiData.events) return [];\n        return apiData.events.map((event)=>({\n                id: event.id,\n                sport: sport,\n                homeTeam: event.competitions[0]?.competitors?.find((c)=>c.homeAway === \"home\")?.team?.displayName || \"Unknown\",\n                awayTeam: event.competitions[0]?.competitors?.find((c)=>c.homeAway === \"away\")?.team?.displayName || \"Unknown\",\n                gameTime: event.date,\n                status: event.status?.type?.description || \"Unknown\",\n                homeScore: event.competitions[0]?.competitors?.find((c)=>c.homeAway === \"home\")?.score || 0,\n                awayScore: event.competitions[0]?.competitors?.find((c)=>c.homeAway === \"away\")?.score || 0\n            }));\n    }\n    // Updated method to include ESPN APIs as fallback\n    async fetchAllLiveMatches() {\n        const results = await Promise.allSettled([\n            // Try paid APIs first\n            this.fetchNFLMatches().catch(()=>this.fetchESPNNFL()),\n            this.fetchNBAMatches().catch(()=>this.fetchESPNNBA()),\n            this.fetchMLBMatches().catch(()=>this.fetchESPNMLB()),\n            this.fetchSoccerMatches()\n        ]);\n        const allMatches = [];\n        results.forEach((result, index)=>{\n            if (result.status === \"fulfilled\") {\n                allMatches.push(...result.value);\n            } else {\n                const sports = [\n                    \"NFL\",\n                    \"NBA\",\n                    \"MLB\",\n                    \"Soccer\"\n                ];\n                console.warn(`Failed to fetch ${sports[index]} data:`, result.reason?.message);\n            }\n        });\n        return allMatches;\n    }\n    // FlashScore integration (web scraping approach)\n    async fetchFlashScoreData() {\n        try {\n            // FlashScore uses dynamic content, so we'll use their mobile API endpoints\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"https://www.flashscore.com/x/feed/proxy-dienst\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n                    \"Referer\": \"https://www.flashscore.com/\"\n                },\n                body: 'commands=[{\"type\":\"live-score\",\"params\":{\"sport\":\"football\"}}]'\n            });\n            if (!response.ok) {\n                throw new Error(`FlashScore API error: ${response.status}`);\n            }\n            const data = await response.text();\n            return this.parseFlashScoreData(data);\n        } catch (error) {\n            console.error(\"FlashScore fetch error:\", error);\n            return [];\n        }\n    }\n    // Statarea integration\n    async fetchStatAreaPredictions() {\n        try {\n            const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"https://www.statarea.com/predictions/today\", {\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n                    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`StatArea API error: ${response.status}`);\n            }\n            const html = await response.text();\n            return this.parseStatAreaPredictions(html);\n        } catch (error) {\n            console.error(\"StatArea fetch error:\", error);\n            return [];\n        }\n    }\n    // Enhanced live score data with FlashScore and StatArea\n    async fetchEnhancedLiveMatches() {\n        const sources = await Promise.allSettled([\n            this.fetchAllLiveMatches(),\n            this.fetchFlashScoreData()\n        ]);\n        const allMatches = [];\n        const predictions = await this.fetchStatAreaPredictions();\n        sources.forEach((result)=>{\n            if (result.status === \"fulfilled\") {\n                allMatches.push(...result.value);\n            }\n        });\n        // Enhance matches with predictions\n        return allMatches.map((match)=>({\n                ...match,\n                prediction: predictions.find((p)=>p.matchId === match.id || p.matchId.includes(match.homeTeam) && p.matchId.includes(match.awayTeam))?.prediction || \"No prediction available\"\n            }));\n    }\n    // Parse FlashScore data\n    parseFlashScoreData(data) {\n        try {\n            // FlashScore returns encoded data, basic parsing approach\n            const matches = [];\n            const lines = data.split(\"\\n\");\n            for (const line of lines){\n                if (line.includes(\"~\") && line.includes(\"|\")) {\n                    const parts = line.split(\"~\");\n                    if (parts.length >= 5) {\n                        matches.push({\n                            id: parts[0] || \"unknown\",\n                            sport: \"Soccer\",\n                            homeTeam: parts[2] || \"Unknown\",\n                            awayTeam: parts[3] || \"Unknown\",\n                            gameTime: new Date().toISOString(),\n                            status: \"Live\",\n                            homeScore: parseInt(parts[4]) || 0,\n                            awayScore: parseInt(parts[5]) || 0\n                        });\n                    }\n                }\n            }\n            return matches;\n        } catch (error) {\n            console.error(\"Error parsing FlashScore data:\", error);\n            return [];\n        }\n    }\n    // Parse StatArea predictions\n    parseStatAreaPredictions(html) {\n        const predictions = [];\n        try {\n            // Basic HTML parsing for predictions\n            const matches = html.match(/<div[^>]*class=\"[^\"]*prediction[^\"]*\"[^>]*>[\\s\\S]*?<\\/div>/g) || [];\n            matches.forEach((match, index)=>{\n                const teamMatch = match.match(/([A-Za-z\\s]+)\\s+vs?\\s+([A-Za-z\\s]+)/);\n                const predictionMatch = match.match(/prediction[^>]*>([^<]+)/);\n                const confidenceMatch = match.match(/confidence[^>]*>(\\d+)%/);\n                if (teamMatch && predictionMatch) {\n                    predictions.push({\n                        matchId: `${teamMatch[1]}_vs_${teamMatch[2]}`,\n                        prediction: predictionMatch[1].trim(),\n                        confidence: confidenceMatch ? parseInt(confidenceMatch[1]) : 75\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(\"Error parsing StatArea predictions:\", error);\n        }\n        return predictions;\n    }\n    // Health check method\n    async checkAPIHealth() {\n        const checks = [\n            {\n                name: \"RapidAPI NFL\",\n                test: ()=>this.fetchNFLMatches()\n            },\n            {\n                name: \"RapidAPI NBA\",\n                test: ()=>this.fetchNBAMatches()\n            },\n            {\n                name: \"RapidAPI MLB\",\n                test: ()=>this.fetchMLBMatches()\n            },\n            {\n                name: \"Soccer API\",\n                test: ()=>this.fetchSoccerMatches()\n            },\n            {\n                name: \"ESPN NFL (Free)\",\n                test: ()=>this.fetchESPNNFL()\n            },\n            {\n                name: \"ESPN NBA (Free)\",\n                test: ()=>this.fetchESPNNBA()\n            },\n            {\n                name: \"ESPN MLB (Free)\",\n                test: ()=>this.fetchESPNMLB()\n            },\n            {\n                name: \"FlashScore\",\n                test: ()=>this.fetchFlashScoreData()\n            },\n            {\n                name: \"StatArea\",\n                test: ()=>this.fetchStatAreaPredictions()\n            },\n            {\n                name: \"Odds API NFL\",\n                test: ()=>this.fetchOddsData(\"NFL\")\n            }\n        ];\n        const results = [];\n        for (const check of checks){\n            try {\n                await check.test();\n                results.push({\n                    service: check.name,\n                    status: \"healthy\"\n                });\n            } catch (error) {\n                results.push({\n                    service: check.name,\n                    status: \"unhealthy\",\n                    error: error.message\n                });\n            }\n        }\n        return results;\n    }\n}\n// Factory function for creating API service with environment variables\nfunction createSportsAPIService() {\n    return new SportsAPIService({\n        rapidApiKey: process.env.RAPIDAPI_KEY,\n        oddsApiKey: process.env.ODDS_API_KEY,\n        footballDataApiKey: process.env.FOOTBALL_DATA_API_KEY\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./Sports-api.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/sports.ts":
/*!*********************************!*\
  !*** ./src/pages/api/sports.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _Sports_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Sports-api */ \"(api)/./Sports-api.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Sports_api__WEBPACK_IMPORTED_MODULE_0__]);\n_Sports_api__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nconst sportsAPI = (0,_Sports_api__WEBPACK_IMPORTED_MODULE_0__.createSportsAPIService)();\n// Sample match data with predictions (fallback)\nconst fallbackMatches = [\n    {\n        id: 1,\n        home: \"Manchester United\",\n        away: \"Liverpool\",\n        prediction: \"Liverpool to win 2-1\"\n    },\n    {\n        id: 2,\n        home: \"Barcelona\",\n        away: \"Real Madrid\",\n        prediction: \"Draw 1-1\"\n    },\n    {\n        id: 3,\n        home: \"Bayern Munich\",\n        away: \"Borussia Dortmund\",\n        prediction: \"Bayern Munich to win 3-0\"\n    },\n    {\n        id: 4,\n        home: \"Arsenal\",\n        away: \"Chelsea\",\n        prediction: \"Arsenal to win 2-0\"\n    }\n];\nasync function handler(req, res) {\n    if (req.method === \"GET\") {\n        try {\n            // Try to fetch enhanced live matches with FlashScore and StatArea data\n            const liveMatches = await sportsAPI.fetchEnhancedLiveMatches();\n            // Convert live matches to dashboard format with real predictions\n            const matches = liveMatches.map((match, index)=>({\n                    id: parseInt(match.id) || index + 1,\n                    home: match.homeTeam,\n                    away: match.awayTeam,\n                    prediction: match.prediction || `Analysis: ${match.homeTeam} vs ${match.awayTeam} - Check recent form and head-to-head records`\n                }));\n            // If no live matches, use fallback data\n            res.status(200).json(matches.length > 0 ? matches : fallbackMatches);\n        } catch (error) {\n            console.error(\"Error fetching enhanced live matches:\", error);\n            // Fallback to regular matches\n            try {\n                const regularMatches = await sportsAPI.fetchAllLiveMatches();\n                const matches = regularMatches.map((match, index)=>({\n                        id: parseInt(match.id) || index + 1,\n                        home: match.homeTeam,\n                        away: match.awayTeam,\n                        prediction: `Prediction for ${match.homeTeam} vs ${match.awayTeam}`\n                    }));\n                res.status(200).json(matches.length > 0 ? matches : fallbackMatches);\n            } catch (fallbackError) {\n                console.error(\"Fallback also failed:\", fallbackError);\n                res.status(200).json(fallbackMatches);\n            }\n        }\n    } else {\n        res.setHeader(\"Allow\", [\n            \"GET\"\n        ]);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL3Nwb3J0cy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUU2RDtBQVM3RCxNQUFNQyxZQUFZRCxtRUFBc0JBO0FBRXhDLGdEQUFnRDtBQUNoRCxNQUFNRSxrQkFBMkI7SUFDL0I7UUFDRUMsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsWUFBWTtJQUNkO0lBQ0E7UUFDRUgsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsWUFBWTtJQUNkO0lBQ0E7UUFDRUgsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsWUFBWTtJQUNkO0lBQ0E7UUFDRUgsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsWUFBWTtJQUNkO0NBQ0Q7QUFFYyxlQUFlQyxRQUFRQyxHQUFtQixFQUFFQyxHQUFvQjtJQUM3RSxJQUFJRCxJQUFJRSxNQUFNLEtBQUssT0FBTztRQUN4QixJQUFJO1lBQ0YsdUVBQXVFO1lBQ3ZFLE1BQU1DLGNBQWMsTUFBTVYsVUFBVVcsd0JBQXdCO1lBRTVELGlFQUFpRTtZQUNqRSxNQUFNQyxVQUFtQkYsWUFBWUcsR0FBRyxDQUFDLENBQUNDLE9BQU9DLFFBQVc7b0JBQzFEYixJQUFJYyxTQUFTRixNQUFNWixFQUFFLEtBQUthLFFBQVE7b0JBQ2xDWixNQUFNVyxNQUFNRyxRQUFRO29CQUNwQmIsTUFBTVUsTUFBTUksUUFBUTtvQkFDcEJiLFlBQVlTLE1BQU1ULFVBQVUsSUFBSSxDQUFDLFVBQVUsRUFBRVMsTUFBTUcsUUFBUSxDQUFDLElBQUksRUFBRUgsTUFBTUksUUFBUSxDQUFDLDZDQUE2QyxDQUFDO2dCQUNqSTtZQUVBLHdDQUF3QztZQUN4Q1YsSUFBSVcsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQ1IsUUFBUVMsTUFBTSxHQUFHLElBQUlULFVBQVVYO1FBQ3RELEVBQUUsT0FBT3FCLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLHlDQUF5Q0E7WUFDdkQsOEJBQThCO1lBQzlCLElBQUk7Z0JBQ0YsTUFBTUUsaUJBQWlCLE1BQU14QixVQUFVeUIsbUJBQW1CO2dCQUMxRCxNQUFNYixVQUFtQlksZUFBZVgsR0FBRyxDQUFDLENBQUNDLE9BQU9DLFFBQVc7d0JBQzdEYixJQUFJYyxTQUFTRixNQUFNWixFQUFFLEtBQUthLFFBQVE7d0JBQ2xDWixNQUFNVyxNQUFNRyxRQUFRO3dCQUNwQmIsTUFBTVUsTUFBTUksUUFBUTt3QkFDcEJiLFlBQVksQ0FBQyxlQUFlLEVBQUVTLE1BQU1HLFFBQVEsQ0FBQyxJQUFJLEVBQUVILE1BQU1JLFFBQVEsQ0FBQyxDQUFDO29CQUNyRTtnQkFDQVYsSUFBSVcsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQ1IsUUFBUVMsTUFBTSxHQUFHLElBQUlULFVBQVVYO1lBQ3RELEVBQUUsT0FBT3lCLGVBQWU7Z0JBQ3RCSCxRQUFRRCxLQUFLLENBQUMseUJBQXlCSTtnQkFDdkNsQixJQUFJVyxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDbkI7WUFDdkI7UUFDRjtJQUNGLE9BQU87UUFDTE8sSUFBSW1CLFNBQVMsQ0FBQyxTQUFTO1lBQUM7U0FBTTtRQUM5Qm5CLElBQUlXLE1BQU0sQ0FBQyxLQUFLUyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUVyQixJQUFJRSxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQ3hEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3Jrc3BhY2UvLi9zcmMvcGFnZXMvYXBpL3Nwb3J0cy50cz85NWQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xuaW1wb3J0IHsgY3JlYXRlU3BvcnRzQVBJU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL1Nwb3J0cy1hcGknO1xuXG5pbnRlcmZhY2UgTWF0Y2gge1xuICBpZDogbnVtYmVyO1xuICBob21lOiBzdHJpbmc7XG4gIGF3YXk6IHN0cmluZztcbiAgcHJlZGljdGlvbjogc3RyaW5nO1xufVxuXG5jb25zdCBzcG9ydHNBUEkgPSBjcmVhdGVTcG9ydHNBUElTZXJ2aWNlKCk7XG5cbi8vIFNhbXBsZSBtYXRjaCBkYXRhIHdpdGggcHJlZGljdGlvbnMgKGZhbGxiYWNrKVxuY29uc3QgZmFsbGJhY2tNYXRjaGVzOiBNYXRjaFtdID0gW1xuICB7XG4gICAgaWQ6IDEsXG4gICAgaG9tZTogXCJNYW5jaGVzdGVyIFVuaXRlZFwiLFxuICAgIGF3YXk6IFwiTGl2ZXJwb29sXCIsXG4gICAgcHJlZGljdGlvbjogXCJMaXZlcnBvb2wgdG8gd2luIDItMVwiXG4gIH0sXG4gIHtcbiAgICBpZDogMixcbiAgICBob21lOiBcIkJhcmNlbG9uYVwiLFxuICAgIGF3YXk6IFwiUmVhbCBNYWRyaWRcIixcbiAgICBwcmVkaWN0aW9uOiBcIkRyYXcgMS0xXCJcbiAgfSxcbiAge1xuICAgIGlkOiAzLFxuICAgIGhvbWU6IFwiQmF5ZXJuIE11bmljaFwiLFxuICAgIGF3YXk6IFwiQm9ydXNzaWEgRG9ydG11bmRcIixcbiAgICBwcmVkaWN0aW9uOiBcIkJheWVybiBNdW5pY2ggdG8gd2luIDMtMFwiXG4gIH0sXG4gIHtcbiAgICBpZDogNCxcbiAgICBob21lOiBcIkFyc2VuYWxcIixcbiAgICBhd2F5OiBcIkNoZWxzZWFcIixcbiAgICBwcmVkaWN0aW9uOiBcIkFyc2VuYWwgdG8gd2luIDItMFwiXG4gIH1cbl07XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcbiAgaWYgKHJlcS5tZXRob2QgPT09ICdHRVQnKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRyeSB0byBmZXRjaCBlbmhhbmNlZCBsaXZlIG1hdGNoZXMgd2l0aCBGbGFzaFNjb3JlIGFuZCBTdGF0QXJlYSBkYXRhXG4gICAgICBjb25zdCBsaXZlTWF0Y2hlcyA9IGF3YWl0IHNwb3J0c0FQSS5mZXRjaEVuaGFuY2VkTGl2ZU1hdGNoZXMoKTtcbiAgICAgIFxuICAgICAgLy8gQ29udmVydCBsaXZlIG1hdGNoZXMgdG8gZGFzaGJvYXJkIGZvcm1hdCB3aXRoIHJlYWwgcHJlZGljdGlvbnNcbiAgICAgIGNvbnN0IG1hdGNoZXM6IE1hdGNoW10gPSBsaXZlTWF0Y2hlcy5tYXAoKG1hdGNoLCBpbmRleCkgPT4gKHtcbiAgICAgICAgaWQ6IHBhcnNlSW50KG1hdGNoLmlkKSB8fCBpbmRleCArIDEsXG4gICAgICAgIGhvbWU6IG1hdGNoLmhvbWVUZWFtLFxuICAgICAgICBhd2F5OiBtYXRjaC5hd2F5VGVhbSxcbiAgICAgICAgcHJlZGljdGlvbjogbWF0Y2gucHJlZGljdGlvbiB8fCBgQW5hbHlzaXM6ICR7bWF0Y2guaG9tZVRlYW19IHZzICR7bWF0Y2guYXdheVRlYW19IC0gQ2hlY2sgcmVjZW50IGZvcm0gYW5kIGhlYWQtdG8taGVhZCByZWNvcmRzYFxuICAgICAgfSkpO1xuXG4gICAgICAvLyBJZiBubyBsaXZlIG1hdGNoZXMsIHVzZSBmYWxsYmFjayBkYXRhXG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihtYXRjaGVzLmxlbmd0aCA+IDAgPyBtYXRjaGVzIDogZmFsbGJhY2tNYXRjaGVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgZW5oYW5jZWQgbGl2ZSBtYXRjaGVzOicsIGVycm9yKTtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIHJlZ3VsYXIgbWF0Y2hlc1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVndWxhck1hdGNoZXMgPSBhd2FpdCBzcG9ydHNBUEkuZmV0Y2hBbGxMaXZlTWF0Y2hlcygpO1xuICAgICAgICBjb25zdCBtYXRjaGVzOiBNYXRjaFtdID0gcmVndWxhck1hdGNoZXMubWFwKChtYXRjaCwgaW5kZXgpID0+ICh7XG4gICAgICAgICAgaWQ6IHBhcnNlSW50KG1hdGNoLmlkKSB8fCBpbmRleCArIDEsXG4gICAgICAgICAgaG9tZTogbWF0Y2guaG9tZVRlYW0sXG4gICAgICAgICAgYXdheTogbWF0Y2guYXdheVRlYW0sXG4gICAgICAgICAgcHJlZGljdGlvbjogYFByZWRpY3Rpb24gZm9yICR7bWF0Y2guaG9tZVRlYW19IHZzICR7bWF0Y2guYXdheVRlYW19YFxuICAgICAgICB9KSk7XG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKG1hdGNoZXMubGVuZ3RoID4gMCA/IG1hdGNoZXMgOiBmYWxsYmFja01hdGNoZXMpO1xuICAgICAgfSBjYXRjaCAoZmFsbGJhY2tFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWxsYmFjayBhbHNvIGZhaWxlZDonLCBmYWxsYmFja0Vycm9yKTtcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oZmFsbGJhY2tNYXRjaGVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzLnNldEhlYWRlcignQWxsb3cnLCBbJ0dFVCddKTtcbiAgICByZXMuc3RhdHVzKDQwNSkuZW5kKGBNZXRob2QgJHtyZXEubWV0aG9kfSBOb3QgQWxsb3dlZGApO1xuICB9XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlU3BvcnRzQVBJU2VydmljZSIsInNwb3J0c0FQSSIsImZhbGxiYWNrTWF0Y2hlcyIsImlkIiwiaG9tZSIsImF3YXkiLCJwcmVkaWN0aW9uIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsImxpdmVNYXRjaGVzIiwiZmV0Y2hFbmhhbmNlZExpdmVNYXRjaGVzIiwibWF0Y2hlcyIsIm1hcCIsIm1hdGNoIiwiaW5kZXgiLCJwYXJzZUludCIsImhvbWVUZWFtIiwiYXdheVRlYW0iLCJzdGF0dXMiLCJqc29uIiwibGVuZ3RoIiwiZXJyb3IiLCJjb25zb2xlIiwicmVndWxhck1hdGNoZXMiLCJmZXRjaEFsbExpdmVNYXRjaGVzIiwiZmFsbGJhY2tFcnJvciIsInNldEhlYWRlciIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/sports.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsports&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fsports.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();